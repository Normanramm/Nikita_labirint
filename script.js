// –õ–∞–±–∏—Ä–∏–Ω—Ç (0 = –ø—É—Ç—å, 1 = —Å—Ç–µ–Ω–∞, 'S' = —Å—Ç–∞—Ä—Ç, 'E' = –≤—ã—Ö–æ–¥)
const mazeTemplate = [
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [1, 'S', 0, 0, 1, 0, 0, 0, 0, 1],
  [1, 1, 1, 0, 1, 0, 1, 1, 0, 1],
  [1, 0, 0, 0, 0, 0, 1, 0, 0, 1],
  [1, 0, 1, 1, 1, 1, 1, 0, 1, 1],
  [1, 0, 1, 0, 0, 0, 0, 0, 1, 1],
  [1, 0, 1, 0, 1, 1, 1, 1, 1, 1],
  [1, 0, 0, 0, 0, 0, 0, 0, 'E', 1],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
];

let maze = [];
let player = { x: 1, y: 1 }; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (S)
let steps = 0;
let gameWon = false;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  maze = mazeTemplate.map(row => [...row]); // –ö–æ–ø–∏—è
  player = { x: 1, y: 1 };
  steps = 0;
  gameWon = false;
  document.getElementById("steps").textContent = steps;
  document.getElementById("message").textContent = "";
  renderMaze();
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
function renderMaze() {
  const mazeElement = document.getElementById("maze");
  mazeElement.innerHTML = "";

  for (let y = 0; y < maze.length; y++) {
    for (let x = 0; x < maze[y].length; x++) {
      const cell = document.createElement("div");
      cell.classList.add("cell");

      if (x === player.x && y === player.y) {
        cell.classList.add("player");
        cell.textContent = "P";
      } else {
        const value = maze[y][x];
        if (value === 1) {
          cell.classList.add("wall");
          cell.textContent = "#";
        } else if (value === 0) {
          cell.classList.add("path");
        } else if (value === 'S') {
          cell.classList.add("start");
          cell.textContent = "S";
        } else if (value === 'E') {
          cell.classList.add("exit");
          cell.textContent = "E";
        }
      }

      mazeElement.appendChild(cell);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–π—Ç–∏ –≤ –∫–ª–µ—Ç–∫—É
function canMove(x, y) {
  if (y < 0 || y >= maze.length || x < 0 || x >= maze[0].length) return false;
  const cell = maze[y][x];
  return cell === 0 || cell === 'E'; // –ü—É—Ç—å –∏–ª–∏ –≤—ã—Ö–æ–¥
}

// –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
function movePlayer(dx, dy) {
  if (gameWon) return;

  const newX = player.x + dx;
  const newY = player.y + dy;

  if (canMove(newX, newY)) {
    player.x = newX;
    player.y = newY;
    steps++;
    document.getElementById("steps").textContent = steps;

    if (maze[newY][newX] === 'E') {
      gameWon = true;
      document.getElementById("message").textContent = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!–¢—ã –¥–æ–¥–∏–∫-–≥–µ–π!";
    }

    renderMaze();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
document.addEventListener("keydown", (e) => {
  switch (e.key) {
    case "ArrowUp":
      e.preventDefault();
      movePlayer(0, -1);
      break;
    case "ArrowDown":
      e.preventDefault();
      movePlayer(0, 1);
      break;
    case "ArrowLeft":
      e.preventDefault();
      movePlayer(-1, 0);
      break;
    case "ArrowRight":
      e.preventDefault();
      movePlayer(1, 0);
      break;
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
document.getElementById("restart").addEventListener("click", initGame);

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ
document.getElementById("up").addEventListener("click", () => movePlayer(0, -1));
document.getElementById("down").addEventListener("click", () => movePlayer(0, 1));
document.getElementById("left").addEventListener("click", () => movePlayer(-1, 0));
document.getElementById("right").addEventListener("click", () => movePlayer(1, 0));

// –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
document.querySelectorAll('.ctrl-btn').forEach(btn => {
  btn.addEventListener('touchstart', e => {
    e.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª
  });
});

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = initGame;
